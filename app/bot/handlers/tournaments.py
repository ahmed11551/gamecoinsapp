"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Ç—É—Ä–Ω–∏—Ä–æ–≤
"""
import logging
from aiogram import Router, F
from aiogram.types import CallbackQuery, Message
from aiogram.fsm.context import FSMContext
from sqlalchemy.ext.asyncio import AsyncSession

from app.bot.keyboards import (
    get_tournament_types_keyboard, get_tournament_fees_keyboard,
    get_tournament_join_keyboard, get_main_menu_keyboard
)
from app.bot.states import TournamentCreation
from app.services.tournament_service import TournamentService
from app.services.user_service import UserService
from app.database.models import GameType, TournamentType

router = Router()
logger = logging.getLogger(__name__)


@router.message(F.text == "üèÜ –¢—É—Ä–Ω–∏—Ä—ã")
async def show_tournaments_menu(message: Message):
    """–ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é —Ç—É—Ä–Ω–∏—Ä–æ–≤"""
    text = """
üèÜ <b>–¢–∏–ø—ã —Ç—É—Ä–Ω–∏—Ä–æ–≤:</b>

‚öîÔ∏è <b>–î—É—ç–ª–∏ (1vs1)</b>
‚Ä¢ –ë—ã—Å—Ç—Ä—ã–µ –ø–æ–µ–¥–∏–Ω–∫–∏
‚Ä¢ –í–∑–Ω–æ—Å: 100-1000 ‚ÇΩ
‚Ä¢ –ü—Ä–∏–∑: 90% –æ—Ç –≤–∑–Ω–æ—Å–∞

üë• <b>–ì—Ä—É–ø–ø–æ–≤—ã–µ (8-16 —á–µ–ª–æ–≤–µ–∫)</b>
‚Ä¢ –¢—É—Ä–Ω–∏—Ä–Ω–∞—è —Å–µ—Ç–∫–∞
‚Ä¢ –í–∑–Ω–æ—Å: 50-200 ‚ÇΩ
‚Ä¢ –ü—Ä–∏–∑—ã: 1-–µ –º–µ—Å—Ç–æ 50%, 2-–µ 30%, 3-–µ 20%

üèÉ <b>–ú–∞—Ä–∞—Ñ–æ–Ω—ã (24 —á–∞—Å–∞)</b>
‚Ä¢ –î–ª–∏—Ç–µ–ª—å–Ω—ã–µ —Å–æ—Ä–µ–≤–Ω–æ–≤–∞–Ω–∏—è
‚Ä¢ –í–∑–Ω–æ—Å: 100-200 ‚ÇΩ
‚Ä¢ –ü—Ä–∏–∑—ã: —Ç–æ–ø-10 —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
    """
    
    await message.answer(text, reply_markup=get_tournament_types_keyboard())


@router.callback_query(F.data.startswith("tournament_"))
async def handle_tournament_type(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ —Ç—É—Ä–Ω–∏—Ä–∞"""
    tournament_type = callback.data.split("_")[1]
    
    if tournament_type in ["duel", "group", "marathon"]:
        await state.update_data(tournament_type=tournament_type)
        await callback.message.edit_text(
            f"üèÜ <b>–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–º–µ—Ä –≤–∑–Ω–æ—Å–∞ –¥–ª—è {tournament_type}:</b>",
            reply_markup=get_tournament_fees_keyboard(tournament_type)
        )
    else:
        await callback.answer("‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø —Ç—É—Ä–Ω–∏—Ä–∞")
    
    await callback.answer()


@router.callback_query(F.data.startswith("tournament_fee_"))
async def handle_tournament_fee(callback: CallbackQuery, state: FSMContext, session: AsyncSession):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —Ä–∞–∑–º–µ—Ä–∞ –≤–∑–Ω–æ—Å–∞"""
    try:
        fee = int(callback.data.split("_")[2])
        data = await state.get_data()
        tournament_type = data.get("tournament_type")
        
        await state.update_data(entry_fee=fee)
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∏–≥—Ä—ã –¥–ª—è —ç—Ç–æ–≥–æ —Ç–∏–ø–∞ —Ç—É—Ä–Ω–∏—Ä–∞
        if tournament_type == "duel":
            games = ["clicker", "reaction", "2048"]
        elif tournament_type == "group":
            games = ["clicker", "reaction", "2048", "chess", "backgammon"]
        else:  # marathon
            games = ["2048", "chess", "backgammon"]
        
        text = f"""
üèÜ <b>–°–æ–∑–¥–∞–Ω–∏–µ —Ç—É—Ä–Ω–∏—Ä–∞</b>

üìã <b>–¢–∏–ø:</b> {tournament_type.capitalize()}
üí∞ <b>–í–∑–Ω–æ—Å:</b> {fee} ‚ÇΩ

–í—ã–±–µ—Ä–∏—Ç–µ –∏–≥—Ä—É:
        """
        
        keyboard = InlineKeyboardBuilder()
        for game in games:
            keyboard.add(InlineKeyboardButton(
                text=f"üéÆ {game.capitalize()}", 
                callback_data=f"create_tournament_game_{game}"
            ))
        
        keyboard.add(InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_tournaments"))
        keyboard.adjust(2)
        
        await callback.message.edit_text(text, reply_markup=keyboard.as_markup())
        
    except ValueError:
        await callback.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ä–∞–∑–º–µ—Ä –≤–∑–Ω–æ—Å–∞")
    
    await callback.answer()


@router.callback_query(F.data.startswith("create_tournament_game_"))
async def handle_tournament_game(callback: CallbackQuery, state: FSMContext, session: AsyncSession):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –∏–≥—Ä—ã –¥–ª—è —Ç—É—Ä–Ω–∏—Ä–∞"""
    game_type = callback.data.split("_")[3]
    
    await state.update_data(game_type=game_type)
    await state.set_state(TournamentCreation.waiting_for_title)
    
    text = f"""
üèÜ <b>–°–æ–∑–¥–∞–Ω–∏–µ —Ç—É—Ä–Ω–∏—Ä–∞</b>

–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç—É—Ä–Ω–∏—Ä–∞:
–ü—Ä–∏–º–µ—Ä: "–ë—ã—Å—Ç—Ä—ã–µ –¥—É—ç–ª–∏ –≤ –ö–ª–∏–∫–µ—Ä"
    """
    
    await callback.message.edit_text(text)
    await callback.answer()


@router.message(TournamentCreation.waiting_for_title)
async def handle_tournament_title(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∑–≤–∞–Ω–∏—è —Ç—É—Ä–Ω–∏—Ä–∞"""
    title = message.text.strip()
    
    if len(title) < 3 or len(title) > 100:
        await message.answer("‚ùå –ù–∞–∑–≤–∞–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ—Ç 3 –¥–æ 100 —Å–∏–º–≤–æ–ª–æ–≤")
        return
    
    await state.update_data(title=title)
    await state.set_state(TournamentCreation.waiting_for_description)
    
    await message.answer(
        "üìù <b>–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ç—É—Ä–Ω–∏—Ä–∞:</b>\n\n"
        "–ü—Ä–∏–º–µ—Ä: '–¢—É—Ä–Ω–∏—Ä –¥–ª—è –±—ã—Å—Ç—Ä—ã—Ö –∏–≥—Ä–æ–∫–æ–≤. –ü–æ–±–µ–¥–∏—Ç —Å–∞–º—ã–π –ª–æ–≤–∫–∏–π!'"
    )


@router.message(TournamentCreation.waiting_for_description)
async def handle_tournament_description(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ–ø–∏—Å–∞–Ω–∏—è —Ç—É—Ä–Ω–∏—Ä–∞"""
    description = message.text.strip()
    
    if len(description) > 500:
        await message.answer("‚ùå –û–ø–∏—Å–∞–Ω–∏–µ –Ω–µ –¥–æ–ª–∂–Ω–æ –ø—Ä–µ–≤—ã—à–∞—Ç—å 500 —Å–∏–º–≤–æ–ª–æ–≤")
        return
    
    await state.update_data(description=description)
    await state.set_state(TournamentCreation.waiting_for_max_participants)
    
    data = await state.get_data()
    tournament_type = data.get("tournament_type")
    
    if tournament_type == "duel":
        max_participants = 2
        await state.update_data(max_participants=max_participants)
        await show_tournament_confirmation(message, state)
    else:
        await message.answer(
            f"üë• <b>–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤:</b>\n\n"
            f"–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 2 –¥–æ {'16' if tournament_type == 'group' else '100'}"
        )


@router.message(TournamentCreation.waiting_for_max_participants)
async def handle_max_participants(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤"""
    try:
        max_participants = int(message.text)
        data = await state.get_data()
        tournament_type = data.get("tournament_type")
        
        if tournament_type == "group" and (max_participants < 2 or max_participants > 16):
            await message.answer("‚ùå –î–ª—è –≥—Ä—É–ø–ø–æ–≤–æ–≥–æ —Ç—É—Ä–Ω–∏—Ä–∞: –æ—Ç 2 –¥–æ 16 —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤")
            return
        elif tournament_type == "marathon" and (max_participants < 2 or max_participants > 100):
            await message.answer("‚ùå –î–ª—è –º–∞—Ä–∞—Ñ–æ–Ω–∞: –æ—Ç 2 –¥–æ 100 —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤")
            return
        
        await state.update_data(max_participants=max_participants)
        await show_tournament_confirmation(message, state)
        
    except ValueError:
        await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ")


async def show_tournament_confirmation(message: Message, state: FSMContext):
    """–ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–∏—è —Ç—É—Ä–Ω–∏—Ä–∞"""
    data = await state.get_data()
    
    text = f"""
üèÜ <b>–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–∏—è —Ç—É—Ä–Ω–∏—Ä–∞</b>

üìã <b>–ù–∞–∑–≤–∞–Ω–∏–µ:</b> {data.get('title')}
üìù <b>–û–ø–∏—Å–∞–Ω–∏–µ:</b> {data.get('description')}
üéÆ <b>–ò–≥—Ä–∞:</b> {data.get('game_type').capitalize()}
‚öîÔ∏è <b>–¢–∏–ø:</b> {data.get('tournament_type').capitalize()}
üí∞ <b>–í–∑–Ω–æ—Å:</b> {data.get('entry_fee')} ‚ÇΩ
üë• <b>–£—á–∞—Å—Ç–Ω–∏–∫–æ–≤:</b> {data.get('max_participants')}

‚ö†Ô∏è <b>–í–Ω–∏–º–∞–Ω–∏–µ:</b> –¢—É—Ä–Ω–∏—Ä –Ω–∞—á–Ω–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–∏ –Ω–∞–±–æ—Ä–µ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤.
    """
    
    keyboard = InlineKeyboardBuilder()
    keyboard.add(
        InlineKeyboardButton(text="‚úÖ –°–æ–∑–¥–∞—Ç—å —Ç—É—Ä–Ω–∏—Ä", callback_data="confirm_tournament_creation"),
        InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="cancel_tournament_creation")
    )
    keyboard.adjust(1)
    
    await message.answer(text, reply_markup=keyboard.as_markup())


@router.callback_query(F.data == "confirm_tournament_creation")
async def confirm_tournament_creation(callback: CallbackQuery, state: FSMContext, session: AsyncSession):
    """–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ —Ç—É—Ä–Ω–∏—Ä–∞"""
    data = await state.get_data()
    
    tournament_service = TournamentService(session)
    
    # –°–æ–∑–¥–∞–µ–º —Ç—É—Ä–Ω–∏—Ä
    tournament = await tournament_service.create_tournament(
        creator_id=callback.from_user.id,
        title=data.get("title"),
        description=data.get("description"),
        game_type=GameType(data.get("game_type")),
        tournament_type=TournamentType(data.get("tournament_type")),
        entry_fee=data.get("entry_fee"),
        max_participants=data.get("max_participants")
    )
    
    await state.clear()
    
    await callback.message.edit_text(
        f"‚úÖ <b>–¢—É—Ä–Ω–∏—Ä —Å–æ–∑–¥–∞–Ω!</b>\n\n"
        f"üÜî <b>ID:</b> {tournament.id}\n"
        f"üìã <b>–ù–∞–∑–≤–∞–Ω–∏–µ:</b> {tournament.title}\n"
        f"üí∞ <b>–í–∑–Ω–æ—Å:</b> {tournament.entry_fee} ‚ÇΩ\n"
        f"üèÜ <b>–ü—Ä–∏–∑–æ–≤–æ–π —Ñ–æ–Ω–¥:</b> {tournament.prize_pool:.2f} ‚ÇΩ\n\n"
        f"üîó <b>–°—Å—ã–ª–∫–∞ –¥–ª—è —É—á–∞—Å—Ç–∏—è:</b>\n"
        f"<code>https://t.me/your_bot?start=tournament_{tournament.id}</code>\n\n"
        f"–¢—É—Ä–Ω–∏—Ä –Ω–∞—á–Ω–µ—Ç—Å—è –ø—Ä–∏ –Ω–∞–±–æ—Ä–µ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤!",
        reply_markup=get_main_menu_keyboard()
    )
    
    await callback.answer()


@router.callback_query(F.data == "cancel_tournament_creation")
async def cancel_tournament_creation(callback: CallbackQuery, state: FSMContext):
    """–û—Ç–º–µ–Ω–∏—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ —Ç—É—Ä–Ω–∏—Ä–∞"""
    await state.clear()
    
    await callback.message.edit_text(
        "‚ùå <b>–°–æ–∑–¥–∞–Ω–∏–µ —Ç—É—Ä–Ω–∏—Ä–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ</b>\n\n"
        "–í—ã –º–æ–∂–µ—Ç–µ —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π —Ç—É—Ä–Ω–∏—Ä –≤ –ª—é–±–æ–µ –≤—Ä–µ–º—è.",
        reply_markup=get_main_menu_keyboard()
    )
    
    await callback.answer()


@router.callback_query(F.data.startswith("join_tournament_"))
async def handle_join_tournament(callback: CallbackQuery, session: AsyncSession):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —É—á–∞—Å—Ç–∏—è –≤ —Ç—É—Ä–Ω–∏—Ä–µ"""
    try:
        tournament_id = int(callback.data.split("_")[2])
        
        tournament_service = TournamentService(session)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç—É—Ä–Ω–∏—Ä
        tournament = await tournament_service.get_tournament_by_id(tournament_id)
        
        if not tournament:
            await callback.answer("‚ùå –¢—É—Ä–Ω–∏—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
        
        if tournament.status.value != "registration":
            await callback.answer("‚ùå –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–∞ —Ç—É—Ä–Ω–∏—Ä –∑–∞–∫—Ä—ã—Ç–∞")
            return
        
        # –£—á–∞—Å—Ç–≤—É–µ–º –≤ —Ç—É—Ä–Ω–∏—Ä–µ
        success = await tournament_service.join_tournament(tournament_id, callback.from_user.id)
        
        if success:
            await callback.message.edit_text(
                f"‚úÖ <b>–í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã!</b>\n\n"
                f"üèÜ <b>–¢—É—Ä–Ω–∏—Ä:</b> {tournament.title}\n"
                f"üí∞ <b>–í–∑–Ω–æ—Å:</b> {tournament.entry_fee} ‚ÇΩ\n"
                f"üéÆ <b>–ò–≥—Ä–∞:</b> {tournament.game_type.value}\n\n"
                f"–¢—É—Ä–Ω–∏—Ä –Ω–∞—á–Ω–µ—Ç—Å—è –ø—Ä–∏ –Ω–∞–±–æ—Ä–µ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤!"
            )
        else:
            await callback.message.edit_text(
                "‚ùå <b>–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è</b>\n\n"
                "–í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:\n"
                "‚Ä¢ –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ –±–∞–ª–∞–Ω—Å–µ\n"
                "‚Ä¢ –¢—É—Ä–Ω–∏—Ä —É–∂–µ –∑–∞–ø–æ–ª–Ω–µ–Ω\n"
                "‚Ä¢ –í—ã —É–∂–µ —É—á–∞—Å—Ç–≤—É–µ—Ç–µ –≤ —Ç—É—Ä–Ω–∏—Ä–µ"
            )
        
    except ValueError:
        await callback.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π ID —Ç—É—Ä–Ω–∏—Ä–∞")
    
    await callback.answer()


@router.message(Command("tournaments"))
async def show_active_tournaments(message: Message, session: AsyncSession):
    """–ü–æ–∫–∞–∑–∞—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–µ —Ç—É—Ä–Ω–∏—Ä—ã"""
    tournament_service = TournamentService(session)
    tournaments = await tournament_service.get_active_tournaments()
    
    if not tournaments:
        text = "üèÜ <b>–ê–∫—Ç–∏–≤–Ω—ã—Ö —Ç—É—Ä–Ω–∏—Ä–æ–≤ –Ω–µ—Ç</b>\n\n–°–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—ã–π —Ç—É—Ä–Ω–∏—Ä –∏–ª–∏ –¥–æ–∂–¥–∏—Ç–µ—Å—å –ø–æ—è–≤–ª–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–æ—Ä–µ–≤–Ω–æ–≤–∞–Ω–∏–π."
    else:
        text = "üèÜ <b>–ê–∫—Ç–∏–≤–Ω—ã–µ —Ç—É—Ä–Ω–∏—Ä—ã:</b>\n\n"
        
        for tournament in tournaments[:10]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ 10
            status_emoji = "üü¢" if tournament.status.value == "registration" else "üü°"
            participants_count = len(tournament.participants)
            
            text += f"{status_emoji} <b>{tournament.title}</b>\n"
            text += f"üéÆ {tournament.game_type.value} ‚Ä¢ üí∞ {tournament.entry_fee} ‚ÇΩ\n"
            text += f"üë• {participants_count}/{tournament.max_participants} —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤\n"
            text += f"üèÜ –ü—Ä–∏–∑–æ–≤–æ–π —Ñ–æ–Ω–¥: {tournament.prize_pool:.2f} ‚ÇΩ\n\n"
    
    await message.answer(text)
