"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –ø–ª–∞—Ç–µ–∂–µ–π
"""
import logging
from aiogram import Router, F
from aiogram.types import CallbackQuery, Message, PreCheckoutQuery, SuccessfulPayment
from aiogram.fsm.context import FSMContext
from sqlalchemy.ext.asyncio import AsyncSession

from app.bot.keyboards import get_payment_methods_keyboard, get_confirmation_keyboard, get_main_menu_keyboard
from app.bot.states import PaymentStates, WithdrawalStates
from app.services.user_service import UserService
from app.services.payment_service import PaymentService
from app.config import settings

router = Router()
logger = logging.getLogger(__name__)


@router.message(F.text == "üí∞ –ë–∞–ª–∞–Ω—Å")
async def show_balance_menu(message: Message, session: AsyncSession):
    """–ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é –±–∞–ª–∞–Ω—Å–∞"""
    user_service = UserService(session)
    user = await user_service.get_user_by_telegram_id(message.from_user.id)
    
    if not user:
        await message.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start")
        return
    
    text = f"""
üí∞ <b>–í–∞—à –±–∞–ª–∞–Ω—Å: {user.balance} ‚ÇΩ</b>

üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>
‚Ä¢ –ü–æ–ø–æ–ª–Ω–µ–Ω–æ: {user.total_deposits} ‚ÇΩ
‚Ä¢ –í—ã–≤–µ–¥–µ–Ω–æ: {user.total_withdrawals} ‚ÇΩ
‚Ä¢ –í—ã–∏–≥—Ä–∞–Ω–æ: {user.total_winnings} ‚ÇΩ

üí° <b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è:</b>
‚Ä¢ –ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å
‚Ä¢ –í—ã–≤–µ—Å—Ç–∏ —Å—Ä–µ–¥—Å—Ç–≤–∞
‚Ä¢ –ò—Å—Ç–æ—Ä–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
    """
    
    keyboard = InlineKeyboardBuilder()
    keyboard.add(
        InlineKeyboardButton(text="üí≥ –ü–æ–ø–æ–ª–Ω–∏—Ç—å", callback_data="deposit_menu"),
        InlineKeyboardButton(text="üí∏ –í—ã–≤–µ—Å—Ç–∏", callback_data="withdraw_menu"),
        InlineKeyboardButton(text="üìã –ò—Å—Ç–æ—Ä–∏—è", callback_data="transaction_history")
    )
    keyboard.add(InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_main"))
    keyboard.adjust(1)
    
    await message.answer(text, reply_markup=keyboard.as_markup())


@router.callback_query(F.data == "deposit_menu")
async def show_deposit_menu(callback: CallbackQuery, state: FSMContext):
    """–ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è"""
    await state.set_state(PaymentStates.waiting_for_amount)
    
    text = """
üí≥ <b>–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞</b>

–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è:

‚≠ê <b>Telegram Stars</b> - –º–≥–Ω–æ–≤–µ–Ω–Ω–æ, –±–µ–∑ –∫–æ–º–∏—Å—Å–∏–∏
üí≥ <b>–ë–∞–Ω–∫–æ–≤—Å–∫–∞—è –∫–∞—Ä—Ç–∞</b> - —á–µ—Ä–µ–∑ –ÆKassa
‚Çø <b>–ö—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞</b> - USDT, –∞–Ω–æ–Ω–∏–º–Ω–æ

–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è: 100 ‚ÇΩ
    """
    
    await callback.message.edit_text(text, reply_markup=get_payment_methods_keyboard())
    await callback.answer()


@router.callback_query(F.data.startswith("payment_"))
async def handle_payment_method(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —Å–ø–æ—Å–æ–±–∞ –ø–ª–∞—Ç–µ–∂–∞"""
    payment_method = callback.data.split("_")[1]
    
    await state.update_data(payment_method=payment_method)
    
    if payment_method == "stars":
        text = """
‚≠ê <b>–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ —á–µ—Ä–µ–∑ Telegram Stars</b>

–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è (–æ—Ç 100 ‚ÇΩ):
–ü—Ä–∏–º–µ—Ä: 500
        """
    elif payment_method == "card":
        text = """
üí≥ <b>–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ —á–µ—Ä–µ–∑ –±–∞–Ω–∫–æ–≤—Å–∫—É—é –∫–∞—Ä—Ç—É</b>

–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è (–æ—Ç 100 ‚ÇΩ):
–ü—Ä–∏–º–µ—Ä: 1000
        """
    else:  # crypto
        text = """
‚Çø <b>–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ —á–µ—Ä–µ–∑ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—É</b>

–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –≤ USDT (–æ—Ç 10 USDT):
–ü—Ä–∏–º–µ—Ä: 50
        """
    
    await callback.message.edit_text(text)
    await callback.answer()


@router.message(PaymentStates.waiting_for_amount)
async def handle_deposit_amount(message: Message, state: FSMContext, session: AsyncSession):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å—É–º–º—ã –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è"""
    try:
        amount = float(message.text)
        
        if amount < 100:
            await message.answer("‚ùå –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è: 100 ‚ÇΩ")
            return
        
        if amount > 50000:
            await message.answer("‚ùå –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è: 50 000 ‚ÇΩ")
            return
        
        data = await state.get_data()
        payment_method = data.get("payment_method")
        
        if payment_method == "stars":
            await process_telegram_stars_payment(message, amount, session)
        elif payment_method == "card":
            await process_card_payment(message, amount, session)
        else:  # crypto
            await process_crypto_payment(message, amount, session)
        
        await state.clear()
        
    except ValueError:
        await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É (—Ç–æ–ª—å–∫–æ —á–∏—Å–ª–∞)")


async def process_telegram_stars_payment(message: Message, amount: float, session: AsyncSession):
    """–û–±—Ä–∞–±–æ—Ç–∞—Ç—å –ø–ª–∞—Ç–µ–∂ —á–µ—Ä–µ–∑ Telegram Stars"""
    payment_service = PaymentService(session)
    
    # –°–æ–∑–¥–∞–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ
    transaction = await payment_service.create_deposit_request(
        user_id=message.from_user.id,
        amount=amount,
        payment_method="telegram_stars"
    )
    
    # –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å Telegram Stars API
    # –ü–æ–∫–∞ —á—Ç–æ —Å–∏–º—É–ª–∏—Ä—É–µ–º —É—Å–ø–µ—à–Ω—ã–π –ø–ª–∞—Ç–µ–∂
    success = await payment_service.process_telegram_stars_payment(
        user_id=message.from_user.id,
        amount=amount,
        external_id=f"stars_{transaction.id}"
    )
    
    if success:
        await message.answer(
            f"‚úÖ <b>–ë–∞–ª–∞–Ω—Å —É—Å–ø–µ—à–Ω–æ –ø–æ–ø–æ–ª–Ω–µ–Ω!</b>\n\n"
            f"üí∞ –°—É–º–º–∞: {amount} ‚ÇΩ\n"
            f"üí≥ –°–ø–æ—Å–æ–±: Telegram Stars\n"
            f"üÜî ID —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏: {transaction.id}"
        )
    else:
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–∏ –±–∞–ª–∞–Ω—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")


async def process_card_payment(message: Message, amount: float, session: AsyncSession):
    """–û–±—Ä–∞–±–æ—Ç–∞—Ç—å –ø–ª–∞—Ç–µ–∂ —á–µ—Ä–µ–∑ –∫–∞—Ä—Ç—É"""
    payment_service = PaymentService(session)
    
    # –°–æ–∑–¥–∞–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ
    transaction = await payment_service.create_deposit_request(
        user_id=message.from_user.id,
        amount=amount,
        payment_method="yookassa"
    )
    
    # –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å –ÆKassa
    # –ü–æ–∫–∞ —á—Ç–æ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏
    await message.answer(
        f"üí≥ <b>–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ —á–µ—Ä–µ–∑ –±–∞–Ω–∫–æ–≤—Å–∫—É—é –∫–∞—Ä—Ç—É</b>\n\n"
        f"üí∞ –°—É–º–º–∞: {amount} ‚ÇΩ\n"
        f"üÜî ID —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏: {transaction.id}\n\n"
        f"üìã <b>–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏:</b>\n"
        f"1. –ü–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ –¥–ª—è –æ–ø–ª–∞—Ç—ã\n"
        f"2. –í–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –∫–∞—Ä—Ç—ã\n"
        f"3. –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –ø–ª–∞—Ç–µ–∂\n"
        f"4. –°—Ä–µ–¥—Å—Ç–≤–∞ –ø–æ—Å—Ç—É–ø—è—Ç –Ω–∞ –±–∞–ª–∞–Ω—Å –≤ —Ç–µ—á–µ–Ω–∏–µ 5 –º–∏–Ω—É—Ç\n\n"
        f"üîó –°—Å—ã–ª–∫–∞ –¥–ª—è –æ–ø–ª–∞—Ç—ã: https://yookassa.ru/pay/{transaction.id}\n\n"
        f"‚ö†Ô∏è <b>–í–∞–∂–Ω–æ:</b> –ù–µ –∑–∞–∫—Ä—ã–≤–∞–π—Ç–µ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –æ–ø–ª–∞—Ç—ã!"
    )


async def process_crypto_payment(message: Message, amount: float, session: AsyncSession):
    """–û–±—Ä–∞–±–æ—Ç–∞—Ç—å –ø–ª–∞—Ç–µ–∂ —á–µ—Ä–µ–∑ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—É"""
    payment_service = PaymentService(session)
    
    # –°–æ–∑–¥–∞–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ
    transaction = await payment_service.create_deposit_request(
        user_id=message.from_user.id,
        amount=amount,
        payment_method="crypto_usdt"
    )
    
    # –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å Binance Pay –∏–ª–∏ –¥—Ä—É–≥–æ–π –∫—Ä–∏–ø—Ç–æ–ø–ª–∞—Ç–µ–∂–Ω–æ–π —Å–∏—Å—Ç–µ–º–æ–π
    await message.answer(
        f"‚Çø <b>–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ —á–µ—Ä–µ–∑ USDT</b>\n\n"
        f"üí∞ –°—É–º–º–∞: {amount} USDT\n"
        f"üÜî ID —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏: {transaction.id}\n\n"
        f"üìã <b>–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏:</b>\n"
        f"1. –û—Ç–ø—Ä–∞–≤—å—Ç–µ {amount} USDT –Ω–∞ –∞–¥—Ä–µ—Å:\n"
        f"<code>TQn9Y2khEsLJW1ChVWFMSMeRDow5KcbLSE</code>\n"
        f"2. –í –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ —É–∫–∞–∂–∏—Ç–µ: {transaction.id}\n"
        f"3. –î–æ–∂–¥–∏—Ç–µ—Å—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è (–æ–±—ã—á–Ω–æ 5-15 –º–∏–Ω—É—Ç)\n"
        f"4. –°—Ä–µ–¥—Å—Ç–≤–∞ –ø–æ—Å—Ç—É–ø—è—Ç –Ω–∞ –±–∞–ª–∞–Ω—Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏\n\n"
        f"‚ö†Ô∏è <b>–í–∞–∂–Ω–æ:</b> –û—Ç–ø—Ä–∞–≤–ª—è–π—Ç–µ —Ç–æ–ª—å–∫–æ USDT (TRC20)!"
    )


@router.callback_query(F.data == "withdraw_menu")
async def show_withdraw_menu(callback: CallbackQuery, state: FSMContext):
    """–ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é –≤—ã–≤–æ–¥–∞ —Å—Ä–µ–¥—Å—Ç–≤"""
    await state.set_state(WithdrawalStates.waiting_for_amount)
    
    text = f"""
üí∏ <b>–í—ã–≤–æ–¥ —Å—Ä–µ–¥—Å—Ç–≤</b>

–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –≤—ã–≤–æ–¥–∞: {settings.MIN_WITHDRAWAL_AMOUNT} ‚ÇΩ
–ö–æ–º–∏—Å—Å–∏—è –Ω–∞ –≤—ã–≤–æ–¥: {settings.WITHDRAWAL_COMMISSION * 100}%

–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –¥–ª—è –≤—ã–≤–æ–¥–∞:
    """
    
    await callback.message.edit_text(text)
    await callback.answer()


@router.message(WithdrawalStates.waiting_for_amount)
async def handle_withdrawal_amount(message: Message, state: FSMContext, session: AsyncSession):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å—É–º–º—ã –≤—ã–≤–æ–¥–∞"""
    try:
        amount = float(message.text)
        
        if amount < settings.MIN_WITHDRAWAL_AMOUNT:
            await message.answer(f"‚ùå –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –≤—ã–≤–æ–¥–∞: {settings.MIN_WITHDRAWAL_AMOUNT} ‚ÇΩ")
            return
        
        user_service = UserService(session)
        user = await user_service.get_user_by_telegram_id(message.from_user.id)
        
        if not user or user.balance < amount:
            await message.answer("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ –±–∞–ª–∞–Ω—Å–µ")
            return
        
        commission = amount * settings.WITHDRAWAL_COMMISSION
        final_amount = amount - commission
        
        await state.update_data(
            withdrawal_amount=amount,
            commission=commission,
            final_amount=final_amount
        )
        
        await state.set_state(WithdrawalStates.waiting_for_payment_details)
        
        text = f"""
üí∏ <b>–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –≤—ã–≤–æ–¥–∞</b>

üí∞ –°—É–º–º–∞ –∫ –≤—ã–≤–æ–¥—É: {amount} ‚ÇΩ
üí∏ –ö–æ–º–∏—Å—Å–∏—è ({settings.WITHDRAWAL_COMMISSION * 100}%): {commission:.2f} ‚ÇΩ
‚úÖ –ö –ø–æ–ª—É—á–µ–Ω–∏—é: {final_amount:.2f} ‚ÇΩ

–í–≤–µ–¥–∏—Ç–µ —Ä–µ–∫–≤–∏–∑–∏—Ç—ã –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è:
‚Ä¢ –ù–æ–º–µ—Ä –∫–∞—Ä—Ç—ã (–¥–ª—è –±–∞–Ω–∫–æ–≤—Å–∫–æ–≥–æ –ø–µ—Ä–µ–≤–æ–¥–∞)
‚Ä¢ –ò–ª–∏ –∞–¥—Ä–µ—Å –∫–æ—à–µ–ª—å–∫–∞ (–¥–ª—è –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã)
        """
        
        await message.answer(text)
        
    except ValueError:
        await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É (—Ç–æ–ª—å–∫–æ —á–∏—Å–ª–∞)")


@router.message(WithdrawalStates.waiting_for_payment_details)
async def handle_withdrawal_details(message: Message, state: FSMContext, session: AsyncSession):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ä–µ–∫–≤–∏–∑–∏—Ç–æ–≤ –¥–ª—è –≤—ã–≤–æ–¥–∞"""
    payment_details = message.text
    
    data = await state.get_data()
    amount = data.get("withdrawal_amount")
    commission = data.get("commission")
    final_amount = data.get("final_amount")
    
    await state.update_data(payment_details=payment_details)
    
    text = f"""
üí∏ <b>–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –≤—ã–≤–æ–¥–∞ —Å—Ä–µ–¥—Å—Ç–≤</b>

üí∞ –°—É–º–º–∞: {amount} ‚ÇΩ
üí∏ –ö–æ–º–∏—Å—Å–∏—è: {commission:.2f} ‚ÇΩ
‚úÖ –ö –ø–æ–ª—É—á–µ–Ω–∏—é: {final_amount:.2f} ‚ÇΩ

üìã –†–µ–∫–≤–∏–∑–∏—Ç—ã: {payment_details}

‚ö†Ô∏è <b>–í–Ω–∏–º–∞–Ω–∏–µ:</b> –í—ã–≤–æ–¥ —Å—Ä–µ–¥—Å—Ç–≤ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è –≤ —Ç–µ—á–µ–Ω–∏–µ 24 —á–∞—Å–æ–≤ –≤ —Ä–∞–±–æ—á–∏–µ –¥–Ω–∏.
    """
    
    await message.answer(
        text,
        reply_markup=get_confirmation_keyboard("withdrawal")
    )


@router.callback_query(F.data == "confirm_withdrawal")
async def confirm_withdrawal(callback: CallbackQuery, state: FSMContext, session: AsyncSession):
    """–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –≤—ã–≤–æ–¥ —Å—Ä–µ–¥—Å—Ç–≤"""
    data = await state.get_data()
    
    payment_service = PaymentService(session)
    
    transaction = await payment_service.create_withdrawal_request(
        user_id=callback.from_user.id,
        amount=data.get("withdrawal_amount"),
        payment_details={
            "method": "bank_transfer",
            "details": data.get("payment_details")
        }
    )
    
    if transaction:
        await callback.message.edit_text(
            f"‚úÖ <b>–ó–∞—è–≤–∫–∞ –Ω–∞ –≤—ã–≤–æ–¥ —Å–æ–∑–¥–∞–Ω–∞!</b>\n\n"
            f"üÜî ID –∑–∞—è–≤–∫–∏: {transaction.id}\n"
            f"üí∞ –°—É–º–º–∞: {data.get('withdrawal_amount')} ‚ÇΩ\n"
            f"‚úÖ –ö –ø–æ–ª—É—á–µ–Ω–∏—é: {data.get('final_amount'):.2f} ‚ÇΩ\n\n"
            f"üìã –°—Ç–∞—Ç—É—Å –∑–∞—è–≤–∫–∏ –º–æ–∂–Ω–æ –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å –≤ —Ä–∞–∑–¥–µ–ª–µ '–ò—Å—Ç–æ—Ä–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π'"
        )
    else:
        await callback.message.edit_text(
            "‚ùå <b>–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞—è–≤–∫–∏</b>\n\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É."
        )
    
    await state.clear()
    await callback.answer()


@router.callback_query(F.data == "cancel_withdrawal")
async def cancel_withdrawal(callback: CallbackQuery, state: FSMContext):
    """–û—Ç–º–µ–Ω–∏—Ç—å –≤—ã–≤–æ–¥ —Å—Ä–µ–¥—Å—Ç–≤"""
    await state.clear()
    
    await callback.message.edit_text(
        "‚ùå <b>–í—ã–≤–æ–¥ —Å—Ä–µ–¥—Å—Ç–≤ –æ—Ç–º–µ–Ω–µ–Ω</b>\n\n"
        "–í—ã –º–æ–∂–µ—Ç–µ —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –∑–∞—è–≤–∫—É –≤ –ª—é–±–æ–µ –≤—Ä–µ–º—è.",
        reply_markup=get_main_menu_keyboard()
    )
    
    await callback.answer()


@router.callback_query(F.data == "transaction_history")
async def show_transaction_history(callback: CallbackQuery, session: AsyncSession):
    """–ü–æ–∫–∞–∑–∞—Ç—å –∏—Å—Ç–æ—Ä–∏—é —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π"""
    user_service = UserService(session)
    user = await user_service.get_user_by_telegram_id(callback.from_user.id)
    
    if not user:
        await callback.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
    
    transactions = await user_service.get_recent_transactions(user.id, limit=10)
    
    if not transactions:
        text = "üìã <b>–ò—Å—Ç–æ—Ä–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –ø—É—Å—Ç–∞</b>\n\n–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –æ–ø–µ—Ä–∞—Ü–∏–π."
    else:
        text = "üìã <b>–ü–æ—Å–ª–µ–¥–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏:</b>\n\n"
        
        for transaction in transactions:
            status_emoji = "‚úÖ" if transaction.status.value == "completed" else "‚è≥"
            type_emoji = {
                "deposit": "üí≥",
                "withdrawal": "üí∏", 
                "tournament_fee": "üèÜ",
                "prize": "üéÅ",
                "referral_bonus": "üéÅ"
            }.get(transaction.transaction_type.value, "üí∞")
            
            text += f"{status_emoji} {type_emoji} {transaction.amount} ‚ÇΩ\n"
            text += f"   {transaction.description}\n"
            text += f"   {transaction.created_at.strftime('%d.%m.%Y %H:%M')}\n\n"
    
    await callback.message.edit_text(
        text,
        reply_markup=get_main_menu_keyboard()
    )
    
    await callback.answer()
