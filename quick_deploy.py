"""
–ë—ã—Å—Ç—Ä–æ–µ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ –Ω–∞ Vercel
"""
import subprocess
import sys

def quick_deploy():
    """–ë—ã—Å—Ç—Ä–æ–µ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ"""
    print("üöÄ –ë—ã—Å—Ç—Ä–æ–µ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ —Ç—É—Ä–Ω–∏—Ä–Ω–æ–π –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã –Ω–∞ Vercel")
    print("=" * 60)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ Vercel CLI
    try:
        subprocess.run(['vercel', '--version'], check=True, capture_output=True)
        print("‚úÖ Vercel CLI –Ω–∞–π–¥–µ–Ω")
    except (subprocess.CalledProcessError, FileNotFoundError):
        print("‚ùå Vercel CLI –Ω–µ –Ω–∞–π–¥–µ–Ω")
        print("üì¶ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ Vercel CLI...")
        try:
            subprocess.run(['npm', 'i', '-g', 'vercel'], check=True)
            print("‚úÖ Vercel CLI —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        except subprocess.CalledProcessError:
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å Vercel CLI")
            print("üí° –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –≤—Ä—É—á–Ω—É—é: npm i -g vercel")
            return False
    
    # –°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∏–º–µ–Ω –ø—Ä–æ–µ–∫—Ç–æ–≤
    project_names = [
        "tournament-platform-2024",
        "telegram-games-bot",
        "skill-tournament-app", 
        "games-platform-bot",
        "tournament-bot-v2",
        "skill-games-platform-v2"
    ]
    
    print("\nüìù –î–æ—Å—Ç—É–ø–Ω—ã–µ –∏–º–µ–Ω–∞ –ø—Ä–æ–µ–∫—Ç–æ–≤:")
    for i, name in enumerate(project_names, 1):
        print(f"{i}. {name}")
    
    # –í—ã–±–∏—Ä–∞–µ–º –∏–º—è –ø—Ä–æ–µ–∫—Ç–∞
    while True:
        try:
            choice = int(input(f"\n–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–º–µ—Ä (1-{len(project_names)}): "))
            if 1 <= choice <= len(project_names):
                project_name = project_names[choice - 1]
                break
            else:
                print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä")
        except ValueError:
            print("‚ùå –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ")
    
    print(f"\nüöÄ –†–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞: {project_name}")
    
    # –†–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ
    try:
        result = subprocess.run([
            'vercel', '--prod', '--name', project_name, '--yes'
        ], capture_output=True, text=True)
        
        if result.returncode == 0:
            print("‚úÖ –†–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")
            print(f"üåê URL: https://{project_name}.vercel.app")
            
            print("\nüîß –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:")
            print("1. –î–æ–±–∞–≤—å—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –≤ Vercel Dashboard")
            print("2. –°–æ–∑–¥–∞–π—Ç–µ Telegram –±–æ—Ç–∞ —á–µ—Ä–µ–∑ @BotFather")
            print("3. –ù–∞—Å—Ç—Ä–æ–π—Ç–µ webhook:")
            print(f'   curl -X POST "https://api.telegram.org/bot<TOKEN>/setWebhook" \\')
            print(f'        -H "Content-Type: application/json" \\')
            print(f'        -d \'{{"url": "https://{project_name}.vercel.app/webhook"}}\'')
            
            return True
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è: {result.stderr}")
            return False
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–∏: {e}")
        return False

if __name__ == "__main__":
    quick_deploy()
