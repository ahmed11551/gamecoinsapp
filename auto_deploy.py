"""
–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ –Ω–∞ Vercel
"""
import subprocess
import os
import time
import json

def check_vercel_cli():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è Vercel CLI"""
    try:
        result = subprocess.run(['vercel', '--version'], capture_output=True, text=True)
        if result.returncode == 0:
            print(f"‚úÖ Vercel CLI –Ω–∞–π–¥–µ–Ω: {result.stdout.strip()}")
            return True
        else:
            print("‚ùå Vercel CLI –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
            return False
    except FileNotFoundError:
        print("‚ùå Vercel CLI –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return False

def install_vercel_cli():
    """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ Vercel CLI"""
    print("üì¶ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ Vercel CLI...")
    try:
        result = subprocess.run(['npm', 'i', '-g', 'vercel'], capture_output=True, text=True)
        if result.returncode == 0:
            print("‚úÖ Vercel CLI —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
            return True
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏: {result.stderr}")
            return False
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ: {e}")
        return False

def login_vercel():
    """–õ–æ–≥–∏–Ω –≤ Vercel"""
    print("üîê –õ–æ–≥–∏–Ω –≤ Vercel...")
    try:
        result = subprocess.run(['vercel', 'login'], input='y\n', text=True, capture_output=True)
        if result.returncode == 0:
            print("‚úÖ –£—Å–ø–µ—à–Ω—ã–π –ª–æ–≥–∏–Ω –≤ Vercel")
            return True
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ª–æ–≥–∏–Ω–∞: {result.stderr}")
            return False
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ª–æ–≥–∏–Ω–µ: {e}")
        return False

def deploy_to_vercel(project_name=None):
    """–†–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ –Ω–∞ Vercel"""
    print("üöÄ –†–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ –Ω–∞ Vercel...")
    
    cmd = ['vercel', '--prod']
    if project_name:
        cmd.extend(['--name', project_name])
    
    try:
        result = subprocess.run(cmd, capture_output=True, text=True)
        if result.returncode == 0:
            print("‚úÖ –†–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")
            print(f"üåê –†–µ–∑—É–ª—å—Ç–∞—Ç: {result.stdout}")
            return True
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è: {result.stderr}")
            return False
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–∏: {e}")
        return False

def setup_environment_variables():
    """–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è"""
    print("\nüîß –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è:")
    print("1. –ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ Vercel Dashboard")
    print("2. –û—Ç–∫—Ä–æ–π—Ç–µ –≤–∞—à –ø—Ä–æ–µ–∫—Ç")
    print("3. –ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ Settings ‚Üí Environment Variables")
    print("4. –î–æ–±–∞–≤—å—Ç–µ —Å–ª–µ–¥—É—é—â–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ:")
    print()
    print("BOT_TOKEN=your_bot_token_from_botfather")
    print("DATABASE_URL=postgresql://user:password@host:port/database")
    print("REDIS_URL=redis://host:port/0")
    print("SECRET_KEY=your-secret-key-here")
    print("ADMIN_USER_IDS=your_telegram_id")
    print("WEBHOOK_URL=https://your-project.vercel.app")
    print("WEBHOOK_PATH=/webhook")

def setup_telegram_webhook():
    """–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ Telegram webhook"""
    print("\nü§ñ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Telegram webhook:")
    print("1. –°–æ–∑–¥–∞–π—Ç–µ –±–æ—Ç–∞ —á–µ—Ä–µ–∑ @BotFather")
    print("2. –ü–æ–ª—É—á–∏—Ç–µ —Ç–æ–∫–µ–Ω –±–æ—Ç–∞")
    print("3. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ webhook:")
    print()
    print('curl -X POST "https://api.telegram.org/bot<YOUR_BOT_TOKEN>/setWebhook" \\')
    print('     -H "Content-Type: application/json" \\')
    print('     -d \'{"url": "https://your-project.vercel.app/webhook"}\'')

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üéØ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ —Ç—É—Ä–Ω–∏—Ä–Ω–æ–π –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã –Ω–∞ Vercel")
    print("=" * 70)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º Vercel CLI
    if not check_vercel_cli():
        print("\nüì¶ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ Vercel CLI...")
        if not install_vercel_cli():
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å Vercel CLI")
            print("üí° –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –≤—Ä—É—á–Ω—É—é: npm i -g vercel")
            return False
    
    # –õ–æ–≥–∏–Ω –≤ Vercel
    print("\nüîê –õ–æ–≥–∏–Ω –≤ Vercel...")
    if not login_vercel():
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –≤–æ–π—Ç–∏ –≤ Vercel")
        return False
    
    # –í—ã–±–æ—Ä –∏–º–µ–Ω–∏ –ø—Ä–æ–µ–∫—Ç–∞
    print("\nüìù –í—ã–±–µ—Ä–∏—Ç–µ –∏–º—è –ø—Ä–æ–µ–∫—Ç–∞:")
    print("1. tournament-platform-2024")
    print("2. telegram-games-bot")
    print("3. skill-tournament-app")
    print("4. games-platform-bot")
    print("5. –í–≤–µ—Å—Ç–∏ —Å–≤–æ–µ –∏–º—è")
    
    choice = input("\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä (1-5): ").strip()
    
    project_names = {
        "1": "tournament-platform-2024",
        "2": "telegram-games-bot", 
        "3": "skill-tournament-app",
        "4": "games-platform-bot"
    }
    
    if choice in project_names:
        project_name = project_names[choice]
    elif choice == "5":
        project_name = input("–í–≤–µ–¥–∏—Ç–µ –∏–º—è –ø—Ä–æ–µ–∫—Ç–∞: ").strip()
    else:
        project_name = "tournament-platform-2024"
    
    print(f"\nüöÄ –†–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞: {project_name}")
    
    # –†–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ
    if deploy_to_vercel(project_name):
        print(f"\nüéâ –ü—Ä–æ–µ–∫—Ç '{project_name}' —É—Å–ø–µ—à–Ω–æ —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç!")
        
        # –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ
        setup_environment_variables()
        setup_telegram_webhook()
        
        print(f"\nüåê URL –ø—Ä–æ–µ–∫—Ç–∞: https://{project_name}.vercel.app")
        print("üì± –í–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å: https://{project_name}.vercel.app/")
        print("ü§ñ Webhook: https://{project_name}.vercel.app/webhook")
        
        return True
    else:
        print("‚ùå –†–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ –Ω–µ —É–¥–∞–ª–æ—Å—å")
        return False

if __name__ == "__main__":
    main()
